
CREATE TABLE EMPLOYEE
       (E# 		NUMBER(4),
	ENAME 	VARCHAR2(10),
	MANAGER#   	NUMBER(4),
	HIREDATE 	DATE,
	SALARY 	NUMBER(7),
	COMM 		NUMBER(7,2),
	DNAME 	VARCHAR2(14),
	CITY		VARCHAR(13),
	STREET#	NUMBER(3),
	BLDG#		NUMBER(4),
	LEVEL#	NUMBER(2),
        PRIMARY KEY(E#));


 
INSERT INTO EMPLOYEE VALUES (7839,'KING',NULL,'17-NOV-90',5000,NULL,'RESEARCH', 'NEW YORK', 30, 123, 99);
INSERT INTO EMPLOYEE VALUES (7566,'JONES',7839,'2-APR-81',2975,NULL,'ACCOUNTING','NEW YORK', 30, 123, 99);
INSERT INTO EMPLOYEE VALUES
	(7698,'BLAKE',7839,'1-MAY-81',2850,NULL,'OPERATIONS','BOSTON', 45, 34, 10);
INSERT INTO EMPLOYEE VALUES
	(7782,'CLARK',7839,'9-JUN-81',2450,NULL,'ACCOUNTING','NEW YORK', 30, 123, 99);
INSERT INTO EMPLOYEE VALUES
	(7788,'SCOTT',7566,'09-DEC-82',3000,NULL,'RESEARCH','NEW YORK', 30, 123, 99);
INSERT INTO EMPLOYEE VALUES
	(7902,'FORD',7566,'3-DEC-81',3000,NULL,'OPERATIONS','BOSTON', 45, 34, 10);
INSERT INTO EMPLOYEE VALUES
	(7499,'ALLEN',7698,'20-FEB-81',1600,300,'SALES','LOS ANGELES', 35, 1, 99);
INSERT INTO EMPLOYEE VALUES
	(7466,'ALLEN',7698,'10-JUN-76',2000,335,'SALES','BOSTON', 29, 999, 34);
INSERT INTO EMPLOYEE VALUES
	(7498,'ALLEN',7698,'20-FEB-81',1600,300,'SALES','LOS ANGELES', 35, 1, 99);
INSERT INTO EMPLOYEE VALUES
	(7521,'WARD',7698,'22-FEB-81',1250,500,'','CHICAGO', 34, 1, 90);
INSERT INTO EMPLOYEE VALUES
	(7654,'MARTIN',7698,'28-SEP-81',1250,1400,'SALES','DALLAS', 34, 1, 6);
INSERT INTO EMPLOYEE VALUES
	(7844,'TURNER',7698,'8-SEP-81',1500,100,'SALES','NEW YORK', 30, 123, 99);
INSERT INTO EMPLOYEE VALUES
	(7234,'BONAPARTE',7466,'8-MAY-66',1500,100,'SALES','PARIS', 19, 77, 34);
INSERT INTO EMPLOYEE VALUES
	(7235,'D''ARC',7466,'20-FEB-78',2200,300,'SALES','PARIS', 19, 77, 34);
INSERT INTO EMPLOYEE VALUES
	(7900,'JAMES',7698,'3-DEC-81',950,NULL,'ACCOUNTING','NEW YORK', 30, 123, 99);
INSERT INTO EMPLOYEE VALUES
	(7876,'ADAMS',7788,'12-JAN-83',1100,NULL,'ACCOUNTING','NEW YORK', 30, 123, 99);
INSERT INTO EMPLOYEE VALUES
	(7369,'SMITH',7902,'17-DEC-80',800,NULL,'OPERATIONS','BOSTON', 45, 34, 10);
INSERT INTO EMPLOYEE VALUES
	(7811,'HILL',7876,'23-DEC-80',1800,NULL,'TRANSPORT', 'NEW YORK', 34, 56, 23);
INSERT INTO EMPLOYEE VALUES
	(7812,'LAUDA',7521,'22-JUN-50',1100,500,'TRANSPORT', 'NEW YORK', 34, 56, 23);
INSERT INTO EMPLOYEE VALUES
	(7813,'BERGER',7654,'23-APR-67',1200,300,'TRANSPORT', 'NEW YORK', 34, 56, 23);
  
  
  SELECT * FROM EMPLOYEE;

--Creating table Department
CREATE TABLE DEPARTMENT
       (DEPTNO 	NUMBER(3),
	DNAME 	VARCHAR2(14),
	BUDGET	NUMBER(7),
	PRIMARY KEY(DEPTNO)
	);
INSERT INTO DEPARTMENT VALUES
	(101,'RESEARCH', 80000);
INSERT INTO DEPARTMENT VALUES
	(102,'OPERATIONS', 60000);
INSERT INTO DEPARTMENT VALUES
	(103,'ACCOUNTING', 60000);
INSERT INTO DEPARTMENT VALUES
	(104,'TRANSPORT', 40000);
INSERT INTO DEPARTMENT VALUES
	(105,'SALES', 50000);
	
--Creating table SALARY AND TRANSACTION



CREATE TABLE TRANSACTION
       ( ACTION CHAR(1),
        E# 	NUMBER(4),
        DAYSOFF  NUMBER(2),
        EXTRA_PAY NUMBER(7,2),
       MONTH   NUMBER(2),
        YEAR    NUMBER(4),
	CITY	VARCHAR(13),
	STREET#	NUMBER(3),
	BLDG#	NUMBER(4)
	);



CREATE TABLE SALARY_LIST
       ( E# 	NUMBER(4),
         PAYMENT  NUMBER(7,2),
        MONTH   NUMBER(2),
        YEAR    NUMBER(4)
	);





--CREATING LOG TABLE
CREATE TABLE LOGTABLE
       (E# 	NUMBER(4),
         ACTION CHAR(1),
        ERROR_CODE  NUMBER(2),
        ERROR_DESC VARCHAR(1000)
        );
     
--I CHANGED THE LOG TABLE VARCGHAR VALUE BECAUSE WE NEED MORE SPACE FOR INSERTION IN TASK 4

CREATE OR REPLACE FUNCTION CHECK_TRANSACTION(this_action TRANSACTION.ACTION %type,this_enum TRANSACTION.E# %type,this_daysoff TRANSACTION.DAYSOFF %type,this_extra TRANSACTION.EXTRA_PAY %type,this_month TRANSACTION.MONTH %type,this_year TRANSACTION.YEAR %type,this_city TRANSACTION.CITY %type,this_street TRANSACTION.STREET# %type,this_bldg TRANSACTION.BLDG# %type)    
return VARCHAR    
    
AS    

CURSOR C1 IS SELECT E# FROM EMPLOYEE;    
 BADCHECK int :=0;    
 COUNTER int;
 ERROR_CODE int(2);
 ERROR_DESC varchar(50);

ACTION_NOT_EXIST EXCEPTION; 
INVALID_EID EXCEPTION;
NEGATIVE_EID EXCEPTION;
DAYSOFF EXCEPTION;
EXTRAPAY EXCEPTION;
INVALID_MONTH EXCEPTION;
INVALID_YEAR EXCEPTION;
NEGATIVE_MONTH EXCEPTION;
NEGATIVE_YEAR EXCEPTION;
NEGATIVE_STREET EXCEPTION;
NEGATIVE_BLDG EXCEPTION;
EID_NULL EXCEPTION;
BEGIN    

IF(this_enum IS NULL)
THEN RAISE EID_NULL;
END IF;


--CHECKS THE EID AGAINST THE TABLE    
FOR I IN C1 LOOP    
IF(I.E#!=this_enum)    
THEN BADCHECK:= BADCHECK+ 1;  
END IF;    
END LOOP;    
    
    
SELECT COUNT(E#)     
into COUNTER FROM EMPLOYEE;   

--CHECKING OTHER PARAMETERES     
IF(BADCHECK=COUNTER)    
THEN RAISE INVALID_EID;  

ELSIF(this_action!='U'AND this_action!='P' AND this_action!='D' AND this_action!='A')
THEN RAISE ACTION_NOT_EXIST;

ELSIF(this_enum<0)
THEN RAISE NEGATIVE_EID; 

ELSIF(this_enum<0)
THEN RAISE NEGATIVE_EID; 

ELSIF(this_daysoff>=30 OR this_daysoff<=0)
THEN RAISE DAYSOFF;

ELSIF(this_extra<=0)
THEN RAISE EXTRAPAY;

ELSIF(this_month>12)
THEN RAISE INVALID_MONTH;

ELSIF(this_year!=2022)
THEN RAISE INVALID_YEAR;

ELSIF(this_month<0)
THEN RAISE NEGATIVE_MONTH;

ELSIF(this_year<0)
THEN RAISE NEGATIVE_YEAR;

ELSIF(this_street<0)
THEN RAISE NEGATIVE_STREET;

ELSIF(this_bldg<0)
THEN RAISE NEGATIVE_BLDG;

ELSE
INSERT INTO LOGTABLE VALUES(this_enum,this_action,ERROR_CODE,ERROR_DESC);
RETURN 0;
END IF;    
    
EXCEPTION   
WHEN EID_NULL THEN    
ERROR_CODE:=01;
ERROR_DESC:='E# IS NULL';
INSERT INTO LOGTABLE VALUES(this_enum,this_action,ERROR_CODE,ERROR_DESC);
return -1;

WHEN INVALID_EID THEN    
ERROR_CODE:=02;
ERROR_DESC:='E# IS INVALID'; 
INSERT INTO LOGTABLE VALUES(this_enum,this_action,ERROR_CODE,ERROR_DESC);
return -1;

WHEN ACTION_NOT_EXIST THEN
ERROR_CODE:=03;
ERROR_DESC:='NOT A VALID ACTION';
INSERT INTO LOGTABLE VALUES(this_enum,this_action,ERROR_CODE,ERROR_DESC);
return -1;

WHEN NEGATIVE_EID THEN    
ERROR_CODE:=04;
ERROR_DESC:='E# IS NEGATIVE';
INSERT INTO LOGTABLE VALUES(this_enum,this_action,ERROR_CODE,ERROR_DESC);
return -1;    

WHEN DAYSOFF THEN    
ERROR_CODE:=05;
ERROR_DESC:='DAYS OF CANNOT BE - OR MORE THAN 30';
INSERT INTO LOGTABLE VALUES(this_enum,this_action,ERROR_CODE,ERROR_DESC);
return -1;   

WHEN EXTRAPAY THEN    
ERROR_CODE:=06;
ERROR_DESC:='EXTRA PAY IS NEGATIVE OR 0'; 
INSERT INTO LOGTABLE VALUES(this_enum,this_action,ERROR_CODE,ERROR_DESC);
return -1;   

WHEN INVALID_MONTH THEN    
ERROR_CODE:=07;
ERROR_DESC:='MONTH IS INVALID';
INSERT INTO LOGTABLE VALUES(this_enum,this_action,ERROR_CODE,ERROR_DESC);
return -1;

WHEN INVALID_YEAR THEN    
ERROR_CODE:=08;
ERROR_DESC:='YEAR IS NOT CURRENT YEAR';
INSERT INTO LOGTABLE VALUES(this_enum,this_action,ERROR_CODE,ERROR_DESC);
return -1;

WHEN NEGATIVE_MONTH THEN    
ERROR_CODE:=09;
ERROR_DESC:='MONTH IS NEGATIVE';
INSERT INTO LOGTABLE VALUES(this_enum,this_action,ERROR_CODE,ERROR_DESC);
return -1;

WHEN NEGATIVE_YEAR THEN    
ERROR_CODE:=10;
ERROR_DESC:='YEAR IS NEGATIVE';
INSERT INTO LOGTABLE VALUES(this_enum,this_action,ERROR_CODE,ERROR_DESC);
return -1;

WHEN NEGATIVE_STREET THEN    
ERROR_CODE:=11;
ERROR_DESC:='STREET# IS NEGATIVE';
INSERT INTO LOGTABLE VALUES(this_enum,this_action,ERROR_CODE,ERROR_DESC);
return -1;

WHEN NEGATIVE_BLDG THEN    
ERROR_CODE:=12;
ERROR_DESC:='BLDG# IS NEGATIVE';
INSERT INTO LOGTABLE VALUES(this_enum,this_action,ERROR_CODE,ERROR_DESC);
return -1;
    
END CHECK_TRANSACTION;



-- FUNCTION FOR PROCESSING ALL THE TRANSACTION IN TRANSACTION TABLE
CREATE OR REPLACE FUNCTION PROCESS_TRANSACTION
RETURN INT
AS 
CURSOR C1 IS SELECT*FROM TRANSACTION;
RESULT INT;
SALARY NUMBER(7);
PAYMENT NUMBER(7);
OLD_SAL NUMBER(7);
OLD_CITY VARCHAR(13);
OLD_STREET#	NUMBER(3);
OLD_BLDG# NUMBER(4);

BEGIN 
FOR I IN C1 LOOP

IF(CHECK_TRANSACTION(I.ACTION,I.E#,I.DAYSOFF,I.EXTRA_PAY,I.MONTH,I.YEAR,I.CITY,I.STREET#,I.BLDG#)=0) THEN 
        IF(I.ACTION='U') THEN
        
        SELECT SALARY INTO OLD_SAL FROM EMPLOYEE  
        WHERE E#=I.E#;
        
        UPDATE EMPLOYEE 
        SET SALARY=I.EXTRA_PAY
        WHERE E#=I.E#;
        
        
        UPDATE LOGTABLE
        SET ERROR_DESC=OLD_SAL
        WHERE E#=I.E# AND ACTION='U';
        
        ELSIF(I.ACTION='P') THEN
        SELECT SALARY INTO SALARY FROM EMPLOYEE WHERE E#=I.E#; 
        PAYMENT:= SALARY+I.EXTRA_PAY;
        PAYMENT:=(PAYMENT/30)*(30-I.DAYSOFF);
        INSERT INTO SALARY_LIST VALUES(I.E#,PAYMENT,I.MONTH,I.YEAR);
        
        ELSIF(I.ACTION='D')THEN
        DELETE FROM EMPLOYEE 
        WHERE E#=I.E#;
        
        ELSIF(I.ACTION='A')THEN
        
        SELECT CITY,STREET#,BLDG# INTO OLD_CITY,OLD_STREET#,OLD_BLDG# 
        FROM EMPLOYEE 
        WHERE E#=I.E#;
        
        UPDATE EMPLOYEE
        SET CITY=I.CITY,
        STREET#=I.STREET#,
        BLDG#=I.BLDG#
        WHERE E#=I.E#;
        END IF;
        
        UPDATE LOGTABLE
        SET ERROR_DESC=OLD_CITY||' '||OLD_STREET#||' '||OLD_BLDG#
        WHERE E#=I.E# AND ACTION='A';
        
END IF;
END LOOP;
--REMOVING ALL ROWS WHEN TRANSACTION HAS BEEN PROCESSED
DELETE FROM TRANSACTION;
RETURN 0;
END PROCESS_TRANSACTION;


--TASK3
CREATE OR REPLACE TRIGGER DISPLAY_SAL
AFTER INSERT ON SALARY_LIST
FOR EACH ROW
DECLARE
this_E# SALARY_LIST.E# %TYPE:= :NEW.E#;
this_PAYMENT  SALARY_LIST.PAYMENT %TYPE:= :NEW.PAYMENT;
this_MONTH   SALARY_LIST.MONTH %TYPE:= :NEW.MONTH;
this_YEAR    SALARY_LIST.YEAR %TYPE:= :NEW.YEAR;
BEGIN
DBMS_OUTPUT.PUT_LINE('EMPLOYEE ADDED: '||' E#: '||this_E#||' SALARY PAID: '||this_PAYMENT||' MONTH_PAYED: '||this_MONTH||' YEAR: '||this_YEAR);
END DISPLAY_SAL;



--TASK4
CREATE OR REPLACE TRIGGER EMPLOYEE_UPDATE 
AFTER UPDATE ON EMPLOYEE
FOR EACH ROW 

DECLARE 
ACTION_CODE LOGTABLE.ACTION %TYPE;
ERROR_CODE LOGTABLE.ERROR_CODE %TYPE;
THIS_ERROR_DESC LOGTABLE.ERROR_DESC %TYPE;
BEFORE_SAL EMPLOYEE.SALARY %TYPE;
AFTER_SAL EMPLOYEE.SALARY %TYPE;
BEFORE_CITY TRANSACTION.CITY%TYPE;
AFTER_CITY TRANSACTION.CITY%TYPE;
BEFORE_STREET TRANSACTION.STREET#%TYPE;
AFTER_STREET TRANSACTION.STREET#%TYPE;
BEFORE_BLDG TRANSACTION.BLDG#%TYPE;
AFTER_BLDG TRANSACTION.BLDG#%TYPE;

BEGIN
ACTION_CODE:='X';
ERROR_CODE:=-1;
BEFORE_SAL:= :OLD.SALARY;
AFTER_SAL:= :NEW.SALARY;


IF(BEFORE_SAL!=AFTER_SAL) THEN
DBMS_OUTPUT.PUT_LINE('EMPLOYEE SALARY UPDATED: ' || ' ' || 'BEFORE SAL: ' ||BEFORE_SAL||' AFTER SAL: '||AFTER_SAL);
THIS_ERROR_DESC:=('BEFORE SAL: '||BEFORE_SAL||' AFTER SAL: '||AFTER_SAL);
INSERT INTO LOGTABLE VALUES(:NEW.E#,ACTION_CODE,ERROR_CODE,THIS_ERROR_DESC);

ELSE
BEFORE_CITY:=:OLD.CITY;
AFTER_CITY:=:NEW.CITY;
BEFORE_STREET:=:OLD.STREET#;
AFTER_STREET:=:NEW.STREET#;
BEFORE_BLDG:=:OLD.BLDG#;
AFTER_BLDG:=:NEW.BLDG#;
DBMS_OUTPUT.PUT_LINE('EMPLOYEE ADDRESS UPDATED: '||' '||'BEFORE CITY: '||BEFORE_CITY||' AFTER CITY: '||AFTER_CITY||' BEFORE STREET#: '||BEFORE_STREET||' AFTER STREET#: '||AFTER_STREET||' BEFORE BLDG#: '||BEFORE_BLDG||' AFTER BLDG#: '||AFTER_BLDG);
THIS_ERROR_DESC:=('BEFORE CITY: '||BEFORE_CITY||' AFTER CITY: '||AFTER_CITY||' BEFORE STREET#: '||BEFORE_STREET||' AFTER STREET#: '||AFTER_STREET||' BEFORE BLDG#: '||BEFORE_BLDG||' AFTER BLDG#: '||AFTER_BLDG);
INSERT INTO LOGTABLE VALUES(:NEW.E#,ACTION_CODE,ERROR_CODE,THIS_ERROR_DESC);
END IF;
END ;



--TASK 5
--A
CREATE FUNCTION TASK5A(THIS_E# EMPLOYEE.E# %TYPE,PERCENTAGE INT)
RETURN INT
AS
THIS_SALARY EMPLOYEE.SALARY %TYPE;
TOTAL_SAL EMPLOYEE.SALARY%TYPE;
BEGIN
SELECT SALARY INTO THIS_SALARY FROM EMPLOYEE WHERE E#=THIS_E#;

TOTAL_SAL:=THIS_SALARY+((THIS_SALARY*PERCENTAGE)/100);

INSERT INTO TRANSACTION VALUES('U',THIS_E#,NULL,TOTAL_SAL,11,2022,NULL,NULL,NULL);
RETURN 0;
END TASK5A;

--B

CREATE FUNCTION TASK5B( E# TRANSACTION.E# %TYPE,city TRANSACTION.CITY%TYPE,street# TRANSACTION.STREET#%TYPE,bldg# TRANSACTION.BLDG#%TYPE)
RETURN INT
AS

BEGIN
INSERT INTO TRANSACTION VALUES('A',E#,NULL,NULL,NULL,NULL,city,street#,bldg#);
RETURN 0;
END TASK5B;


--TESTING USING ANONYMOUS BLOCK
DECLARE
THIS_E# EMPLOYEE.E#%TYPE:=7698;
PERCENTAGE INT:=4;
city TRANSACTION.CITY%TYPE:='DUBAI';
street# TRANSACTION.STREET#%TYPE:=55;
bldg# TRANSACTION.BLDG#%TYPE:=8;
X INT;
Y INT;
Z INT;
BEGIN

X:=TASK5A(THIS_E#,PERCENTAGE);
Y:=TASK5B(THIS_E#,city,street#,bldg#);


IF(X=0 AND Y=0)THEN
Z:=PROCESS_TRANSACTION;

END IF;
END;
--YOU CAN VIEW ALL THE RELEVENT TABLES HERE:
SELECT*FROM EMPLOYEE;
SELECT*FROM TRANSACTION;
SELECT*FROM SALARY_LIST;
SELECT*FROM LOGTABLE;
DELETE FROM LOGTABLE;

--TASK 6 ALL POSIBLE INVALID AND VALID INSERTS
--ADDING INSERTS TO THE TRANSACTION TABLE WHICH MAY BE TRUE/FALSE
--UPDATE
INSERT INTO TRANSACTION VALUES ('U',7698,NULL,2000,06,2022,NULL,NULL,NULL);--TRUE
INSERT INTO TRANSACTION VALUES ('U',1234,NULL,2000,06,2022,NULL,NULL,NULL);--FALSE E#_INVALID
INSERT INTO TRANSACTION VALUES ('U',7698,NULL,-2000,06,2022,NULL,NULL,NULL);--FALSE EXTRA PAY IS LESS THAN 0
INSERT INTO TRANSACTION VALUES ('U',7698,NULL,0,06,2022,NULL,NULL,NULL);--FALSE EXTRA PAY IS 0 
INSERT INTO TRANSACTION VALUES ('U',7698,NULL,5000,14,2022,NULL,NULL,NULL);--FALSE MONTH IS INVALID ONLY 01-12
INSERT INTO TRANSACTION VALUES ('U',7698,NULL,5000,06,2021,NULL,NULL,NULL);--FALSE YEAR MUST BE CURRENT YEAR
INSERT INTO TRANSACTION VALUES ('U',7698,NULL,5000,-07,2022,NULL,NULL,NULL);--FALSE MONTH CANNOT BE NEGATIVE
INSERT INTO TRANSACTION VALUES ('U',7698,NULL,5000,07,-2022,NULL,NULL,NULL);--FALSE YEAR CANNOT  BE NEGATIVE
INSERT INTO TRANSACTION VALUES ('U',7698,10,5000,06,2021,'NEW YORK',30,123);--FALSE UNESSCARY PARAMETERS

--PAY
INSERT INTO TRANSACTION VALUES ('P',7698,10,2000,06,2022,NULL,NULL,NULL);--TRUE
INSERT INTO TRANSACTION VALUES ('P',1234,10,2000,06,2022,NULL,NULL,NULL);--FALSE E#_INVALID
INSERT INTO TRANSACTION VALUES ('P',-7698,10,2000,06,2022,NULL,NULL,NULL);--FALSE E# NEGATIVE
INSERT INTO TRANSACTION VALUES ('P',7698,-10,2000,06,2022,NULL,NULL,NULL);--FALSE THE DYAS OFF CANNOT BE NGATIVE ONLY BETWEEN 0-30
INSERT INTO TRANSACTION VALUES ('P',7698,30,2000,06,2022,NULL,NULL,NULL);--FALSE THE DAYS OFF CANNOT BE 30 AS THAT MEANS HE HAS NOT WORKED FOR A WHOLE MONTH
INSERT INTO TRANSACTION VALUES ('P',7698,4,4000,14,2022,NULL,NULL,NULL);--FALSE MONTH IS INVALID ONLY 01-12
INSERT INTO TRANSACTION VALUES ('P',7698,4,4000,-06,2022,NULL,NULL,NULL);--FALSE MONTH CANNOT BE NEGATIVE
INSERT INTO TRANSACTION VALUES ('P',7698,4,4000,06,-2022,NULL,NULL,NULL);--FALSE YEAR CANNOT BE NEGATIVE
INSERT INTO TRANSACTION VALUES ('P',7698,4,4000,06,2021,NULL,NULL,NULL);--FALSE YEAR MUST BE CURRENT YEAR
INSERT INTO TRANSACTION VALUES ('P',7698,10,5000,06,2021,'NEW YORK',30,123);--FALSE UNESSCARY PARAMETERS

--DELETE 
INSERT INTO TRANSACTION VALUES ('D',1234,NULL,NULL,NULL,NULL,NULL,NULL,NULL);--FALSE E#_INVALID
INSERT INTO TRANSACTION VALUES ('D',-7698,NULL,NULL,NULL,NULL,NULL,NULL,NULL);--FALSE E#_NEGATIVE
INSERT INTO TRANSACTION VALUES ('D',7902,NULL,NULL,NULL,NULL,NULL,NULL,NULL);--TRUE

--ADDRESS
INSERT INTO TRANSACTION VALUES ('A',7698,NULL,NULL,NULL,NULL,'CHICAGO',234,564);--TRUE
INSERT INTO TRANSACTION VALUES ('A',1234,NULL,NULL,NULL,NULL,'CHICAGO',234,564);--FALSE E#_INVALID
INSERT INTO TRANSACTION VALUES ('A',-7698,NULL,NULL,NULL,NULL,'CHICAGO',234,564);--FALSE E#_NEGATIVE
INSERT INTO TRANSACTION VALUES ('A',7698,NULL,NULL,NULL,NULL,'CHICAGO',-234,564);--FALSE STREET NMBER CANNOT BE NEGATIVE
INSERT INTO TRANSACTION VALUES ('A',7698,NULL,NULL,NULL,NULL,'CHICAGO',234,-564);--FALSE BLDG# NMBER CANNOT BE NEGATIVE

--DEFAULT
INSERT INTO TRANSACTION VALUES ('G',7698,10,2000,06,2022,NULL,NULL,NULL);--FALSE NO ACTION BY NAME G
INSERT INTO TRANSACTION VALUES (NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL);--FALSE NO ACTION SPECIFIED

--CHECKING ALL THE INVALID/VALID INSERTS VIA ANONYMOUS BLOCK

select*from TRANSACTION ORDER BY ACTION;


DECLARE 
X INT;
BEGIN 
X:=PROCESS_TRANSACTION;
END;

